AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: false, private networking:
  false) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-1
        (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue 'eksctl-cluster-8-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-1
        (workloads using HTTPS port, commonly used with extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-8-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        ng-1
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-8-cluster::SecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MaxSize: '5'
      MinSize: '2'
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: '0'
          OnDemandPercentageAboveBaseCapacity: '50'
          SpotInstancePools: '2'
          SpotMaxPrice: '0.017000'
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateName: !Sub '${AWS::StackName}'
            Version: !GetAtt 
              - NodeGroupLaunchTemplate
              - LatestVersionNumber
          Overrides:
            - InstanceType: t3.small
            - InstanceType: t3.medium
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: cluster-8-ng-1-Node
        - Key: kubernetes.io/cluster/cluster-8
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier: !Split 
        - ','
        - !ImportValue 'eksctl-cluster-8-cluster::SubnetsPublic'
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt 
            - NodeInstanceProfile
            - Arn
        ImageId: ami-06c6b04b283f6a360
        InstanceType: t3.small
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue 'eksctl-cluster-8-cluster::SharedNodeSecurityGroup'
              - !Ref SG
            NetworkCardIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cluster-8-ng-1-Node
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cluster-8-ng-1-Node
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cluster-8-ng-1-Node
        UserData: >-
          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
      LaunchTemplateName: !Sub '${AWS::StackName}'
  NodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NodeInstanceRole'
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodes in group ng-1
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group ng-1 to
            communicate with control plane (kubelet and workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-8-cluster::SecurityGroup'
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group ng-1 to
            communicate with control plane (workloads using HTTPS port, commonly
            used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-8-cluster::SecurityGroup'
          ToPort: 443
      Tags:
        - Key: kubernetes.io/cluster/cluster-8
          Value: owned
        - Key: Name
          Value: !Sub '${AWS::StackName}/SG'
      VpcId: !ImportValue 'eksctl-cluster-8-cluster::VPC'
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt 
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceProfileARN'
  InstanceRoleARN:
    Value: !GetAtt 
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceRoleARN'
