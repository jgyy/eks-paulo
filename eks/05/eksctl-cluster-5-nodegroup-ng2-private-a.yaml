AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: false, private networking:
  true) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group
        ng2-private-a (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group
        ng2-private-a (workloads using HTTPS port, commonly used with extension
        API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        ng2-private-a
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateName: !Sub '${AWS::StackName}'
        Version: !GetAtt 
          - NodeGroupLaunchTemplate
          - LatestVersionNumber
      MaxSize: '2'
      MinSize: '2'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: cluster-5-ng2-private-a-Node
        - Key: kubernetes.io/cluster/cluster-5
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier: !Split 
        - ','
        - !ImportValue 'eksctl-cluster-5-cluster::SubnetsPrivate'
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt 
            - NodeInstanceProfile
            - Arn
        ImageId: ami-06c6b04b283f6a360
        InstanceType: m5.large
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue 'eksctl-cluster-5-cluster::SharedNodeSecurityGroup'
              - !Ref SG
            NetworkCardIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cluster-5-ng2-private-a-Node
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cluster-5-ng2-private-a-Node
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cluster-5-ng2-private-a-Node
        UserData: >-
          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
      LaunchTemplateName: !Sub '${AWS::StackName}'
  NodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NodeInstanceRole'
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Communication between the control plane and worker nodes in group
        ng2-private-a
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group ng2-private-a to
            communicate with control plane (kubelet and workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group ng2-private-a
            to communicate with control plane (workloads using HTTPS port,
            commonly used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
          ToPort: 443
      Tags:
        - Key: kubernetes.io/cluster/cluster-5
          Value: owned
        - Key: Name
          Value: !Sub '${AWS::StackName}/SG'
      VpcId: !ImportValue 'eksctl-cluster-5-cluster::VPC'
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: true
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt 
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceProfileARN'
  InstanceRoleARN:
    Value: !GetAtt 
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceRoleARN'
