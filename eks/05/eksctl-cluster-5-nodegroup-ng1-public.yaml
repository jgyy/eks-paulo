AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: false, private networking:
  false) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng1-public
        (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng1-public
        (workloads using HTTPS port, commonly used with extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        ng1-public
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateName: !Sub '${AWS::StackName}'
        Version: !GetAtt 
          - NodeGroupLaunchTemplate
          - LatestVersionNumber
      MaxSize: '8'
      MinSize: '2'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: cluster-5-ng1-public-Node
        - Key: kubernetes.io/cluster/cluster-5
          PropagateAtLaunch: 'true'
          Value: owned
        - Key: k8s.io/cluster-autoscaler/enabled
          PropagateAtLaunch: 'true'
          Value: 'true'
        - Key: k8s.io/cluster-autoscaler/cluster-5
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier: !Split 
        - ','
        - !ImportValue 'eksctl-cluster-5-cluster::SubnetsPublic'
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              VolumeSize: 100
              VolumeType: gp2
        IamInstanceProfile:
          Arn: !GetAtt 
            - NodeInstanceProfile
            - Arn
        ImageId: ami-0cc8dc7a69cd8b547
        InstanceType: m5.xlarge
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: required
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue 'eksctl-cluster-5-cluster::SharedNodeSecurityGroup'
              - !Ref SG
            NetworkCardIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cluster-5-ng1-public-Node
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cluster-5-ng1-public-Node
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cluster-5-ng1-public-Node
        UserData: >-
          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
      LaunchTemplateName: !Sub '${AWS::StackName}'
  NodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NodeInstanceRole'
  PolicyAutoScaling:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:DescribeAutoScalingInstances'
              - 'autoscaling:DescribeLaunchConfigurations'
              - 'autoscaling:DescribeTags'
              - 'autoscaling:SetDesiredCapacity'
              - 'autoscaling:TerminateInstanceInAutoScalingGroup'
              - 'ec2:DescribeInstanceTypes'
              - 'ec2:DescribeLaunchTemplateVersions'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyAutoScaling'
      Roles:
        - !Ref NodeInstanceRole
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Communication between the control plane and worker nodes in group
        ng1-public
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group ng1-public to
            communicate with control plane (kubelet and workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group ng1-public to
            communicate with control plane (workloads using HTTPS port, commonly
            used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-5-cluster::SecurityGroup'
          ToPort: 443
      Tags:
        - Key: kubernetes.io/cluster/cluster-5
          Value: owned
        - Key: Name
          Value: !Sub '${AWS::StackName}/SG'
      VpcId: !ImportValue 'eksctl-cluster-5-cluster::VPC'
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt 
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceProfileARN'
  InstanceRoleARN:
    Value: !GetAtt 
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceRoleARN'
