AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: false, private networking:
  false) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-1
        (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue 'eksctl-cluster-6-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-1
        (workloads using HTTPS port, commonly used with extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-6-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        ng-1
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-6-cluster::SecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateName: !Sub '${AWS::StackName}'
        Version: !GetAtt 
          - NodeGroupLaunchTemplate
          - LatestVersionNumber
      MaxSize: '2'
      MinSize: '2'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: cluster-6-ng-1-Node
        - Key: kubernetes.io/cluster/cluster-6
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier: !Split 
        - ','
        - !ImportValue 'eksctl-cluster-6-cluster::SubnetsPublic'
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt 
            - NodeInstanceProfile
            - Arn
        ImageId: ami-06c6b04b283f6a360
        InstanceType: m5.large
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue 'eksctl-cluster-6-cluster::SharedNodeSecurityGroup'
              - !Ref SG
            NetworkCardIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cluster-6-ng-1-Node
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cluster-6-ng-1-Node
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cluster-6-ng-1-Node
        UserData: >-
          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
      LaunchTemplateName: !Sub '${AWS::StackName}'
  NodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NodeInstanceRole'
  PolicyEBS:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ec2:CreateSnapshot'
              - 'ec2:AttachVolume'
              - 'ec2:DetachVolume'
              - 'ec2:ModifyVolume'
              - 'ec2:DescribeAvailabilityZones'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeVolumesModifications'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:CreateTags'
            Condition:
              StringEquals:
                'ec2:CreateAction':
                  - CreateVolume
                  - CreateSnapshot
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:ec2:*:*:volume/*'
              - !Sub 'arn:${AWS::Partition}:ec2:*:*:snapshot/*'
          - Action:
              - 'ec2:DeleteTags'
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:ec2:*:*:volume/*'
              - !Sub 'arn:${AWS::Partition}:ec2:*:*:snapshot/*'
          - Action:
              - 'ec2:CreateVolume'
            Condition:
              StringLike:
                'aws:RequestTag/ebs.csi.aws.com/cluster': 'true'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:CreateVolume'
            Condition:
              StringLike:
                'aws:RequestTag/CSIVolumeName': '*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:CreateVolume'
            Condition:
              StringLike:
                'aws:RequestTag/kubernetes.io/cluster/*': owned
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteVolume'
            Condition:
              StringLike:
                'ec2:ResourceTag/ebs.csi.aws.com/cluster': 'true'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteVolume'
            Condition:
              StringLike:
                'ec2:ResourceTag/CSIVolumeName': '*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteVolume'
            Condition:
              StringLike:
                'ec2:ResourceTag/kubernetes.io/cluster/*': owned
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteSnapshot'
            Condition:
              StringLike:
                'ec2:ResourceTag/CSIVolumeSnapshotName': '*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteSnapshot'
            Condition:
              StringLike:
                'ec2:ResourceTag/ebs.csi.aws.com/cluster': 'true'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyEBS'
      Roles:
        - !Ref NodeInstanceRole
  PolicyEFS:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'elasticfilesystem:*'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyEFS'
      Roles:
        - !Ref NodeInstanceRole
  PolicyEFSEC2:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ec2:DescribeSubnets'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:ModifyNetworkInterfaceAttribute'
              - 'ec2:DescribeNetworkInterfaceAttribute'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyEFSEC2'
      Roles:
        - !Ref NodeInstanceRole
  PolicyFSX:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'fsx:*'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyFSX'
      Roles:
        - !Ref NodeInstanceRole
  PolicyServiceLinkRole:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'iam:CreateServiceLinkedRole'
              - 'iam:AttachRolePolicy'
              - 'iam:PutRolePolicy'
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:iam::*:role/aws-service-role/*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyServiceLinkRole'
      Roles:
        - !Ref NodeInstanceRole
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodes in group ng-1
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group ng-1 to
            communicate with control plane (kubelet and workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-6-cluster::SecurityGroup'
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group ng-1 to
            communicate with control plane (workloads using HTTPS port, commonly
            used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-6-cluster::SecurityGroup'
          ToPort: 443
      Tags:
        - Key: kubernetes.io/cluster/cluster-6
          Value: owned
        - Key: Name
          Value: !Sub '${AWS::StackName}/SG'
      VpcId: !ImportValue 'eksctl-cluster-6-cluster::VPC'
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt 
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceProfileARN'
  InstanceRoleARN:
    Value: !GetAtt 
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceRoleARN'
