AWSTemplateFormatVersion: 2010-09-09
Description: 'EKS Managed Nodes (SSH access: false) [created by eksctl]'
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        SecurityGroupIds:
          - !ImportValue 'eksctl-cluster-6-cluster::ClusterSecurityGroupId'
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cluster-6-ng-1-Node
              - Key: alpha.eksctl.io/nodegroup-name
                Value: ng-1
              - Key: alpha.eksctl.io/nodegroup-type
                Value: managed
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cluster-6-ng-1-Node
              - Key: alpha.eksctl.io/nodegroup-name
                Value: ng-1
              - Key: alpha.eksctl.io/nodegroup-type
                Value: managed
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cluster-6-ng-1-Node
              - Key: alpha.eksctl.io/nodegroup-name
                Value: ng-1
              - Key: alpha.eksctl.io/nodegroup-type
                Value: managed
      LaunchTemplateName: !Sub '${AWS::StackName}'
  ManagedNodeGroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      AmiType: AL2_x86_64
      ClusterName: cluster-6
      InstanceTypes:
        - m5.large
      Labels:
        alpha.eksctl.io/cluster-name: cluster-6
        alpha.eksctl.io/nodegroup-name: ng-1
      LaunchTemplate:
        Id: !Ref LaunchTemplate
      NodeRole: !GetAtt 
        - NodeInstanceRole
        - Arn
      NodegroupName: ng-1
      ScalingConfig:
        DesiredSize: 2
        MaxSize: 2
        MinSize: 2
      Subnets: !Split 
        - ','
        - !ImportValue 'eksctl-cluster-6-cluster::SubnetsPublic'
      Tags:
        alpha.eksctl.io/nodegroup-name: ng-1
        alpha.eksctl.io/nodegroup-type: managed
  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NodeInstanceRole'
  PolicyEBS:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ec2:CreateSnapshot'
              - 'ec2:AttachVolume'
              - 'ec2:DetachVolume'
              - 'ec2:ModifyVolume'
              - 'ec2:DescribeAvailabilityZones'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeVolumesModifications'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:CreateTags'
            Condition:
              StringEquals:
                'ec2:CreateAction':
                  - CreateVolume
                  - CreateSnapshot
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:ec2:*:*:volume/*'
              - !Sub 'arn:${AWS::Partition}:ec2:*:*:snapshot/*'
          - Action:
              - 'ec2:DeleteTags'
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:ec2:*:*:volume/*'
              - !Sub 'arn:${AWS::Partition}:ec2:*:*:snapshot/*'
          - Action:
              - 'ec2:CreateVolume'
            Condition:
              StringLike:
                'aws:RequestTag/ebs.csi.aws.com/cluster': 'true'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:CreateVolume'
            Condition:
              StringLike:
                'aws:RequestTag/CSIVolumeName': '*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:CreateVolume'
            Condition:
              StringLike:
                'aws:RequestTag/kubernetes.io/cluster/*': owned
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteVolume'
            Condition:
              StringLike:
                'ec2:ResourceTag/ebs.csi.aws.com/cluster': 'true'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteVolume'
            Condition:
              StringLike:
                'ec2:ResourceTag/CSIVolumeName': '*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteVolume'
            Condition:
              StringLike:
                'ec2:ResourceTag/kubernetes.io/cluster/*': owned
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteSnapshot'
            Condition:
              StringLike:
                'ec2:ResourceTag/CSIVolumeSnapshotName': '*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DeleteSnapshot'
            Condition:
              StringLike:
                'ec2:ResourceTag/ebs.csi.aws.com/cluster': 'true'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyEBS'
      Roles:
        - !Ref NodeInstanceRole
  PolicyEFS:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'elasticfilesystem:*'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyEFS'
      Roles:
        - !Ref NodeInstanceRole
  PolicyEFSEC2:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ec2:DescribeSubnets'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:ModifyNetworkInterfaceAttribute'
              - 'ec2:DescribeNetworkInterfaceAttribute'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyEFSEC2'
      Roles:
        - !Ref NodeInstanceRole
  PolicyFSX:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'fsx:*'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyFSX'
      Roles:
        - !Ref NodeInstanceRole
  PolicyServiceLinkRole:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'iam:CreateServiceLinkedRole'
              - 'iam:AttachRolePolicy'
              - 'iam:PutRolePolicy'
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:iam::*:role/aws-service-role/*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyServiceLinkRole'
      Roles:
        - !Ref NodeInstanceRole
