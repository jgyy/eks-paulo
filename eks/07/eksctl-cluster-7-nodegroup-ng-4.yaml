AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: true, private networking:
  false) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-4
        (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-4
        (workloads using HTTPS port, commonly used with extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        ng-4
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateName: !Sub '${AWS::StackName}'
        Version: !GetAtt 
          - NodeGroupLaunchTemplate
          - LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: cluster-7-ng-4-Node
        - Key: kubernetes.io/cluster/cluster-7
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier: !Split 
        - ','
        - !ImportValue 'eksctl-cluster-7-cluster::SubnetsPublic'
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt 
            - NodeInstanceProfile
            - Arn
        ImageId: ami-06c6b04b283f6a360
        InstanceType: m5.large
        KeyName: >-
          eksctl-cluster-7-nodegroup-ng-4-ee:06:74:eb:58:9e:29:ae:c0:fd:1f:9b:1f:50:3d:b8
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue 'eksctl-cluster-7-cluster::SharedNodeSecurityGroup'
              - !Ref SG
            NetworkCardIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cluster-7-ng-4-Node
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cluster-7-ng-4-Node
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cluster-7-ng-4-Node
        UserData: >-
          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
      LaunchTemplateName: !Sub '${AWS::StackName}'
  NodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NodeInstanceRole'
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodes in group ng-4
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group ng-4 to
            communicate with control plane (kubelet and workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group ng-4 to
            communicate with control plane (workloads using HTTPS port, commonly
            used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH access to worker nodes in group ng-4
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIpv6: '::/0'
          Description: Allow SSH access to worker nodes in group ng-4
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: kubernetes.io/cluster/cluster-7
          Value: owned
        - Key: Name
          Value: !Sub '${AWS::StackName}/SG'
      VpcId: !ImportValue 'eksctl-cluster-7-cluster::VPC'
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt 
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceProfileARN'
  InstanceRoleARN:
    Value: !GetAtt 
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceRoleARN'
