AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: true, private networking:
  false) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-2
        (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-2
        (workloads using HTTPS port, commonly used with extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        ng-2
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateName: !Sub '${AWS::StackName}'
        Version: !GetAtt 
          - NodeGroupLaunchTemplate
          - LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: cluster-7-ng-2-Node
        - Key: kubernetes.io/cluster/cluster-7
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier: !Split 
        - ','
        - !ImportValue 'eksctl-cluster-7-cluster::SubnetsPublic'
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt 
            - NodeInstanceProfile
            - Arn
        ImageId: ami-06c6b04b283f6a360
        InstanceType: m5.large
        KeyName: >-
          eksctl-cluster-7-nodegroup-ng-2-37:f8:bd:39:b2:41:de:9b:70:68:b4:74:ba:62:e6:d1
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue 'eksctl-cluster-7-cluster::SharedNodeSecurityGroup'
              - !Ref SG
            NetworkCardIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cluster-7-ng-2-Node
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cluster-7-ng-2-Node
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cluster-7-ng-2-Node
        UserData: >-
          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
      LaunchTemplateName: !Sub '${AWS::StackName}'
  NodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NodeInstanceRole'
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodes in group ng-2
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group ng-2 to
            communicate with control plane (kubelet and workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group ng-2 to
            communicate with control plane (workloads using HTTPS port, commonly
            used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH access to worker nodes in group ng-2
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIpv6: '::/0'
          Description: Allow SSH access to worker nodes in group ng-2
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: kubernetes.io/cluster/cluster-7
          Value: owned
        - Key: Name
          Value: !Sub '${AWS::StackName}/SG'
      VpcId: !ImportValue 'eksctl-cluster-7-cluster::VPC'
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt 
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceProfileARN'
  InstanceRoleARN:
    Value: !GetAtt 
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceRoleARN'
