AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: true, private networking:
  false) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-3
        (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-3
        (workloads using HTTPS port, commonly used with extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        ng-3
      FromPort: 443
      GroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateName: !Sub '${AWS::StackName}'
        Version: !GetAtt 
          - NodeGroupLaunchTemplate
          - LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: cluster-7-ng-3-Node
        - Key: kubernetes.io/cluster/cluster-7
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier: !Split 
        - ','
        - !ImportValue 'eksctl-cluster-7-cluster::SubnetsPublic'
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt 
            - NodeInstanceProfile
            - Arn
        ImageId: ami-06c6b04b283f6a360
        InstanceType: m5.large
        KeyName: ec2_dev_key
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue 'eksctl-cluster-7-cluster::SharedNodeSecurityGroup'
              - !Ref SG
            NetworkCardIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cluster-7-ng-3-Node
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cluster-7-ng-3-Node
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cluster-7-ng-3-Node
        UserData: >-
          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
      LaunchTemplateName: !Sub '${AWS::StackName}'
  NodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NodeInstanceRole'
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodes in group ng-3
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group ng-3 to
            communicate with control plane (kubelet and workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group ng-3 to
            communicate with control plane (workloads using HTTPS port, commonly
            used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue 'eksctl-cluster-7-cluster::SecurityGroup'
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH access to worker nodes in group ng-3
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIpv6: '::/0'
          Description: Allow SSH access to worker nodes in group ng-3
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: kubernetes.io/cluster/cluster-7
          Value: owned
        - Key: Name
          Value: !Sub '${AWS::StackName}/SG'
      VpcId: !ImportValue 'eksctl-cluster-7-cluster::VPC'
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt 
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceProfileARN'
  InstanceRoleARN:
    Value: !GetAtt 
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::InstanceRoleARN'
